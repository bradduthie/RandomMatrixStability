A0       <- A0 * mean(gam1);
A0_stb   <- max(Re(eigen(A0)$values)) < 0;
A1_stb   <- max(Re(eigen(A1)$values)) < 0;
A0_fea   <- min(-1*solve(A0) %*% r_vec) > 0;
A1_fea   <- min(-1*solve(A1) %*% r_vec) > 0;
if(A0_stb == TRUE){
tot_res[[i-1]][iter, 1] <- 1;
}
if(A1_stb == TRUE){
tot_res[[i-1]][iter, 2] <- 1;
}
if(A0_fea == TRUE){
fea_res[[i-1]][iter, 1] <- 1;
}
if(A1_fea == TRUE){
fea_res[[i-1]][iter, 2] <- 1;
}
iter    <- iter - 1;
}
print(i);
}
all_res <- summarise_randmat(tot_res = tot_res, fea_res = fea_res);
return(all_res);
}
test <- rand_gen_var(max_sp = 100, iters = 100);
test[,1:7]
test[,5] - test[,3]
hist(test[,5] - test[,3])
rand_gen_var2 <- function(max_sp, iters, int_type = 0, rmx = 0.4, C = 1){
tot_res <- NULL;
fea_res <- NULL;
for(i in 2:max_sp){
iter           <- iters;
tot_res[[i-1]] <- matrix(data = 0, nrow = iter, ncol = 7);
fea_res[[i-1]] <- matrix(data = 0, nrow = iter, ncol = 7);
while(iter > 0){
r_vec    <- rnorm(n = i, mean = 0, sd = rmx);
A0_dat   <- rnorm(n = i * i, mean = 0, sd = 0.4);
A0       <- matrix(data = A0_dat, nrow = i, ncol = i);
A0       <- species_interactions(mat = A0, type = int_type);
C_dat    <- rbinom(n = i * i, size = 1, prob = C);
C_mat    <- matrix(data = C_dat, nrow = i, ncol = i);
A0       <- A0 * C_mat;
diag(A0) <- -1;
gam1     <- runif(n = i, min = 0, max = 2);
A1       <- A0 * gam1;
A0       <- A0 * mean(gam1);
A0_stb   <- max(Re(eigen(A0)$values)) < 0;
A1_stb   <- max(Re(eigen(A1)$values)) < 0;
A0_fea   <- min(-1*solve(A0) %*% r_vec) > 0;
A1_fea   <- min(-1*solve(A1) %*% r_vec) > 0;
if(A0_stb == TRUE){
tot_res[[i-1]][iter, 1] <- 1;
}
if(A1_stb == TRUE){
tot_res[[i-1]][iter, 2] <- 1;
}
if(A0_fea == TRUE){
fea_res[[i-1]][iter, 1] <- 1;
}
if(A1_fea == TRUE){
fea_res[[i-1]][iter, 2] <- 1;
}
iter    <- iter - 1;
}
print(i);
}
all_res <- summarise_randmat(tot_res = tot_res, fea_res = fea_res);
return(all_res);
}
rand_gen_var2 <- function(max_sp, iters, int_type = 0, rmx = 0.4, C = 1){
tot_res <- NULL;
fea_res <- NULL;
for(i in 2:max_sp){
iter           <- iters;
tot_res[[i-1]] <- matrix(data = 0, nrow = iter, ncol = 7);
fea_res[[i-1]] <- matrix(data = 0, nrow = iter, ncol = 7);
while(iter > 0){
r_vec    <- rnorm(n = i, mean = 0, sd = rmx);
A0_dat   <- rnorm(n = i * i, mean = 0, sd = 0.4);
A0       <- matrix(data = A0_dat, nrow = i, ncol = i);
A0       <- species_interactions(mat = A0, type = int_type);
C_dat    <- rbinom(n = i * i, size = 1, prob = C);
C_mat    <- matrix(data = C_dat, nrow = i, ncol = i);
A0       <- A0 * C_mat;
diag(A0) <- -1;
gam1     <- runif(n = i, min = 0, max = 2);
A1       <- A0 * gam1;
A0       <- A0 * mean(gam1);
A0_stb   <- max(Re(eigen(A0)$values)) < 0;
A1_stb   <- max(Re(eigen(A1)$values)) < 0;
A0_fea   <- min(-1*solve(A0) %*% r_vec) > 0;
A1_fea   <- min(-1*solve(A1) %*% r_vec) > 0;
if(A0_stb == TRUE){
tot_res[[i-1]][iter, 1] <- 1;
}
if(A1_stb == TRUE){
tot_res[[i-1]][iter, 2] <- 1;
}
if(A0_fea == TRUE){
fea_res[[i-1]][iter, 1] <- 1;
}
if(A1_fea == TRUE){
fea_res[[i-1]][iter, 2] <- 1;
}
iter    <- iter - 1;
}
print(i);
}
all_res <- summarise_randmat(tot_res = tot_res, fea_res = fea_res);
return(all_res);
}
test <- rand_gen_var2(max_sp = 100, iters = 100);
test[,1:7]
test <- rand_gen_var(max_sp = 32, iters = 10000);
plot_stables <- function(dat, S_s = 32){
Ns          <- 1:S_s;
par(oma = c(6, 6, 1, 6), mar = c(0.5, 0.5, 0.5, 0.5));
#=================================
bar_dat                      <- t(cbind(dat[Ns,3], dat[Ns,5]));
log_bar_dat                  <- log(bar_dat);
log_bar_dat[log_bar_dat < 0] <- 0;
barplot(log_bar_dat, beside = TRUE, col = c("grey80", "grey40"),
names.arg = dat[Ns,1], ylim = c(0, 16), xlab = "",
ylab = "Ln number of stable communities", cex.lab = 1,
cex.axis = 1.25, xlim = c(1, 94), cex.names = 1, yaxt = "n");
axis(side = 2, at = c(0, 2, 4, 6, 8, 10, 12, 14), cex.axis = 1.5);
box(lwd = 2);
par(new = TRUE);
y1     <- dat[1:S_s,6] / (dat[1:S_s,5]);
x1     <- seq(from = 2.132, to = 15.1112, length = S_s);
plot(x = x1, y = y1, xaxt = "n", yaxt = "n", lwd = 2, ylim = c(0, 1.1),
xlab = "", ylab = "", type = "b", xlim = c(2, 15), pch = 20,
cex = 1, col = "black", yaxs="i");
points(x = x1, y = y1, lwd = 2, type = "l", col = "black");
axis(side = 4, at = c(0, 0.2, 0.4, 0.6, 0.8, 1.0), cex.axis = 1.5);
legend("topleft", c(expression(paste(gamma," = 1")),
expression(paste("Var(",gamma,")"))),
pch=15, col=c("grey80","grey40"), cex = 1.5, horiz = TRUE);
#=================================
mtext(side = 1, text = "System size (S)", cex = 2, outer = TRUE,
line = 3.0);
mtext(side = 2, text = "Ln number of stable systems", cex = 2,
outer = TRUE, line = 3.5);
mtext(side = 4, text = expression(
paste("Pr. of systems stable due to Var(",gamma,")")),
cex = 2, outer = TRUE, line = 3.5);
}
library(RandomMatrixStability)
?plot_stables
plot_stables
library(RandomMatrixStability)
plot_stables
roxygen2::roxygenise();
library(RandomMatrixStability)
plot_stables
plot_stables <- function(dat, S_s = 32){
Ns          <- 1:S_s;
par(oma = c(6, 6, 1, 6), mar = c(0.5, 0.5, 0.5, 0.5));
#=================================
bar_dat                      <- t(cbind(dat[Ns,3], dat[Ns,5]));
log_bar_dat                  <- log(bar_dat);
log_bar_dat[log_bar_dat < 0] <- 0;
barplot(log_bar_dat, beside = TRUE, col = c("grey80", "red"),
names.arg = dat[Ns,1], ylim = c(0, 16), xlab = "",
ylab = "Ln number of stable communities", cex.lab = 1,
cex.axis = 1.25, xlim = c(1, 94), cex.names = 1, yaxt = "n");
axis(side = 2, at = c(0, 2, 4, 6, 8, 10, 12, 14), cex.axis = 1.5);
box(lwd = 2);
par(new = TRUE);
y1     <- dat[1:S_s,6] / (dat[1:S_s,5]);
x1     <- seq(from = 2.132, to = 15.1112, length = S_s);
plot(x = x1, y = y1, xaxt = "n", yaxt = "n", lwd = 2, ylim = c(0, 1.1),
xlab = "", ylab = "", type = "b", xlim = c(2, 15), pch = 20,
cex = 1, col = "black", yaxs="i");
points(x = x1, y = y1, lwd = 2, type = "l", col = "black");
axis(side = 4, at = c(0, 0.2, 0.4, 0.6, 0.8, 1.0), cex.axis = 1.5);
legend("topleft", c(expression(paste(gamma," = 1")),
expression(paste("Var(",gamma,")"))),
pch=15, col=c("grey80","grey40"), cex = 1.5, horiz = TRUE);
#=================================
mtext(side = 1, text = "System size (S)", cex = 2, outer = TRUE,
line = 3.0);
mtext(side = 2, text = "Ln number of stable systems", cex = 2,
outer = TRUE, line = 3.5);
mtext(side = 4, text = expression(
paste("Pr. of systems stable due to Var(",gamma,")")),
cex = 2, outer = TRUE, line = 3.5);
}
dat <- read.csv(file = "sim_results/evolved/evo_results.csv");
library(RandomMatrixStability)
dat <- read.csv(file = "sim_results/evolved/evo_results.csv");
dat
dat <- dat[,-1];
dat
S_s <- 40;
Ns          <- 1:S_s;
bar_dat                      <- t(cbind(dat[Ns,3], dat[Ns,5]));
bar_dat
S_s <- 39;
Ns          <- 1:S_s;
bar_dat                      <- t(cbind(dat[Ns,3], dat[Ns,5]));
log_bar_dat                  <- log(bar_dat);
log_bar_dat[log_bar_dat < 0] <- 0;
barplot(log_bar_dat, beside = TRUE, col = c("dodgerblue4", "firebrick"),
names.arg = dat[Ns,1], ylim = c(0, 14), xlab = "",
ylab = "Ln number of stable communities", cex.lab = 1,
cex.axis = 1.25, xlim = c(1, 94), cex.names = 1, yaxt = "n");
bar_dat                      <- t(cbind(dat[Ns,3], dat[Ns,5]));
log_bar_dat                  <- log(bar_dat);
log_bar_dat[log_bar_dat < 0] <- 0;
barplot(log_bar_dat, beside = TRUE, col = c("dodgerblue4", "firebrick"),
names.arg = dat[Ns,1], ylim = c(0, 14), xlab = "",
ylab = "Ln number of stable communities", cex.lab = 1,
cex.axis = 1.25, xlim = c(1, 120), cex.names = 1, yaxt = "n");
bar_dat                      <- t(cbind(dat[Ns,3], dat[Ns,5]));
log_bar_dat                  <- log(bar_dat);
log_bar_dat[log_bar_dat < 0] <- 0;
barplot(log_bar_dat, beside = TRUE, col = c("dodgerblue4", "firebrick"),
names.arg = dat[Ns,1], ylim = c(0, 14), xlab = "",
ylab = "Ln number of stable communities", cex.lab = 1,
cex.axis = 1.25, xlim = c(1, 130), cex.names = 1, yaxt = "n");
axis(side = 2, at = c(0, 2, 4, 6, 8, 10, 12), cex.axis = 1.5);
floor(1000 * 0.1)
sample(1:1000, size = 100)
sample(1:1000, size = 100) -> cross1
sample(1:1000, size = 100) -> cross2
cross1
cross2
sample(1:1000, size = 1)
sample(1:1000, size = 2)
sample(1:1000, size = 1)
sample(1:1000, size = 1)
roxygen2::roxygenise()
gb_plot <- function(dir = getwd(), xaxis = "habitat"){ # ---- Add option for hunting and scaring.
res_list <- process_csv_files(dir = dir);
prepped  <- prepare_res_list(res_list);
pnames   <- names(prepped);
#--- Habitat
the_list <- NULL;
y1       <- 1;
x1       <- 6;
if(xaxis == "habitat"){
plot_habitat(prepped = prepped, pnames = pnames, hab_list = the_list,
y1 = y1, x1 = x1);
}
if(xaxis == "shooting"){
plot_shooting(prepped = prepped, pnames = pnames, sht_list = the_list,
y1 = y1, x1 = x1);
}
if(xaxis == "scaring"){
plot_scaring(prepped = prepped, pnames = pnames, scr_list = the_list,
y1 = y1, x1 = x1);
}
}
plot_scaring <- function(prepped, pnames, scr_list, y1, x1){
for(i in 1:length(prepped)){
el_data       <- scaring_data(prep_element = prepped[[i]]);
scr_list[[i]] <- el_data;
if(max(el_data[,3]) > y1){
y1 <- max(el_data[,3]);
}
if(max(el_data[,2]) > x1){
x1 <- max(el_data[,2]);
}
}
names(scr_list) <- pnames;
par(mar = c(5, 5, 1, 1));
plot(x = scr_list[[1]][,2], y = scr_list[[1]][,3], xlab = "Scaring Cells",
pch = 20, ylab = "Mean Round Score", cex.lab = 1.5, cex.axis = 1.5,
cex = 1.5, ylim = c(0, y1 + 10), type = "n", xlim = c(0, x1));
for(i in 1:length(prepped)){
points(x = scr_list[[i]][,2], y = scr_list[[i]][,3], pch = 20,
cex = 2, col = i);
}
legend(x = 0, y = y1 + 10, legend = pnames, fill = 1:length(prepped),
cex = 1.5);
}
plot_shooting <- function(prepped, pnames, sht_list, y1, x1){
for(i in 1:length(prepped)){
el_data       <- shooting_data(prep_element = prepped[[i]]);
sht_list[[i]] <- el_data;
if(max(el_data[,3]) > y1){
y1 <- max(el_data[,3]);
}
if(max(el_data[,2]) > x1){
x1 <- max(el_data[,2]);
}
}
names(sht_list) <- pnames;
par(mar = c(5, 5, 1, 1));
plot(x = sht_list[[1]][,2], y = sht_list[[1]][,3], xlab = "Shooting Cells",
pch = 20, ylab = "Mean Round Score", cex.lab = 1.5, cex.axis = 1.5,
cex = 1.5, ylim = c(0, y1 + 10), type = "n", xlim = c(0, x1));
for(i in 1:length(prepped)){
points(x = sht_list[[i]][,2], y = sht_list[[i]][,3], pch = 20,
cex = 2, col = i);
}
legend(x = 0, y = y1 + 10, legend = pnames, fill = 1:length(prepped),
cex = 1.5);
}
plot_habitat <- function(prepped, pnames, hab_list, y1, x1){
for(i in 1:length(prepped)){
el_data       <- habitat_data(prep_element = prepped[[i]]);
hab_list[[i]] <- el_data;
if(max(el_data[,3]) > y1){
y1 <- max(el_data[,3]);
}
if(max(el_data[,2]) > x1){
x1 <- max(el_data[,2]);
}
}
names(hab_list) <- pnames;
par(mar = c(5, 5, 1, 1));
plot(x = hab_list[[1]][,2], y = hab_list[[1]][,3], xlab = "Habitat Cells",
pch = 20, ylab = "Mean Round Score", cex.lab = 1.5, cex.axis = 1.5,
cex = 1.5, ylim = c(0, y1 + 10), type = "n", xlim = c(0, x1));
for(i in 1:length(prepped)){
points(x = hab_list[[i]][,2], y = hab_list[[i]][,3], pch = 20,
cex = 2, col = i);
}
legend(x = 0, y = y1 + 10, legend = pnames, fill = 1:length(prepped),
cex = 1.5);
}
scaring_data <- function(prep_element){
rounds <- max(prep_element[,2]);
scrdat <- NULL;
for(i in 1:rounds){
rres     <- prep_element[prep_element[,2] == i,];
scaring  <- sum(rres[1:9, 3:6] == 1);
RndScore <- mean(rres[22, 3:6]);
rndDat   <- c(i, scaring, RndScore);
scrdat   <- rbind(scrdat, rndDat);
}
colnames(scrdat) <- c("Round", "Scaring_Cells", "Mean_Score");
return(scrdat);
}
shooting_data <- function(prep_element){
rounds <- max(prep_element[,2]);
shtdat <- NULL;
for(i in 1:rounds){
rres     <- prep_element[prep_element[,2] == i,];
shooting <- sum(rres[1:9, 3:6] == 2);
RndScore <- mean(rres[22, 3:6]);
rndDat   <- c(i, shooting, RndScore);
shtdat   <- rbind(shtdat, rndDat);
}
colnames(shtdat) <- c("Round", "Shooting_Cells", "Mean_Score");
return(shtdat);
}
habitat_data <- function(prep_element){
rounds <- max(prep_element[,2]);
habdat <- NULL;
for(i in 1:rounds){
rres     <- prep_element[prep_element[,2] == i,];
habitat  <- sum(rres[1:9, 3:6] == 3);
RndScore <- mean(rres[22, 3:6]);
rndDat   <- c(i, habitat, RndScore);
habdat   <- rbind(habdat, rndDat);
}
colnames(habdat) <- c("Round", "Habitat_Cells", "Mean_Score");
return(habdat);
}
prepare_res_list <- function(res_list){
games       <- unique(res_list$games);
prep        <- vector("list", length = length(games));
names(prep) <- games;
pnames      <- names(prep);
for(i in 1:length(res_list$games)){
res   <- res_list$results[[i]];
rows  <- dim(res)[1];
nfile <- rep(x = i, length = rows);
res   <- cbind(nfile, res);
type  <- res_list$games[i];
rpos  <- which(pnames == type);
prep[[rpos]] <- rbind(prep[[rpos]], res);
}
return(prep);
}
process_csv_files <- function(dir = getwd()){
all_csvs <- list.files(path = dir, pattern = ".csv");
num_csvs <- length(all_csvs);
games    <- NULL;
results  <- NULL;
list_el  <- 1;
for(i in 1:num_csvs){
filename <- all_csvs[i];
if( identical(dir, getwd()) == FALSE ){
filename <- paste(dir,"/", all_csvs[i], sep= "");
}
check_file <- scan(file = filename, what = "character");
if(check_file[1] == "Player" & check_file[2] == "1"){
file_res             <- summarise_goosebump(filename);
game_type            <- file_res[[1]];
game_res             <- file_res[[2]];
games                <- c(games, game_type);
results[[list_el]]   <- game_res;
list_el              <- list_el + 1;
}
}
return(list(games = games, results = results));
}
summarise_goosebump <- function(filename){
dat         <- scan(file = filename, what = "character");
tags        <- which(dat == "Tag:");
game_types  <- dat[tags + 1];
rounds      <- get_round_number(dat, tags, 1);
Results     <- NULL;
for(i in 1:rounds){
choices <- get_choices(dat, round = i);
taps    <- get_taps(dat, round = i);
scores  <- get_scores(dat, round = i);
rres    <- rbind(choices, taps, scores);
rname   <- rep(x = i, times = dim(rres)[1]);
Rndinfo <- cbind(rname, rres);
Results <- rbind(Results, Rndinfo);
}
namepos            <- which(dat == "HHID:") + 1;
colnames(Results)  <- c("Round_number", dat[namepos]);
game_type          <- strsplit(x = game_types, split = ",")[[1]][1];
all_info           <- list(Game = game_type, Results = Results);
return(all_info);
}
get_round_number <- function(dat, tags, which_tag = 1, use_choice = TRUE){
if(use_choice == FALSE){
tag_pos <- tags[which_tag];
rnd_pos <- tag_pos + 11;
if(dat[tag_pos + 8] != "Number" | dat[tag_pos + 10] != "Rounds:"){
stop("I can't extract the round number for some reason");
}
extrRnd <- strsplit(x = dat[rnd_pos], split = "");
rounds  <- as.numeric(extrRnd[[1]][1]);
}else{
choices <- which(dat == "Choices")
rounds  <- length(choices);
}
return(rounds);
}
get_choices <- function(dat, round){
choices <- which(dat == "Choices")[round];
vals    <- dat[(choices+1):(choices+36)];
extrVal <- strsplit(x = vals, split = "");
cleanEV <- lapply(extrVal, function(l) l[[1]])
EVvec   <- as.numeric(unlist(cleanEV));
player1 <- c(EVvec[1:3],   EVvec[7:9],   EVvec[13:15]);
player2 <- c(EVvec[4:6],   EVvec[10:12], EVvec[16:18]);
player3 <- c(EVvec[19:21], EVvec[25:27], EVvec[31:33]);
player4 <- c(EVvec[22:24], EVvec[28:30], EVvec[34:36]);
players <- cbind(player1, player2, player3, player4);
rownames(players) <- c("cell_1_choice", "cell_2_choice", "cell_3_choice",
"cell_4_choice", "cell_5_choice", "cell_6_choice",
"cell_7_choice", "cell_8_choice", "cell_9_choice");
return(players);
}
get_taps    <- function(dat, round){
Taps    <- which(dat == "Taps")[round];
vals    <- dat[(Taps+1):(Taps+36)];
extrVal <- strsplit(x = vals, split = "");
cleanEV <- lapply(extrVal, function(l) l[[1]]);
EVvec   <- as.numeric(unlist(cleanEV));
player1 <- c(EVvec[1:3],   EVvec[7:9],   EVvec[13:15]);
player2 <- c(EVvec[4:6],   EVvec[10:12], EVvec[16:18]);
player3 <- c(EVvec[19:21], EVvec[25:27], EVvec[31:33]);
player4 <- c(EVvec[22:24], EVvec[28:30], EVvec[34:36]);
players <- cbind(player1, player2, player3, player4);
rownames(players) <- c("cell_1_taps", "cell_2_taps", "cell_3_taps",
"cell_4_taps", "cell_5_taps", "cell_6_taps",
"cell_7_taps", "cell_8_taps", "cell_9_taps");
return(players);
}
get_scores  <- function(dat, round){
sr      <- which(dat == "Summary:")[round];
#--- Get yields
yields  <- c(dat[sr+4], dat[sr+20], dat[sr+36], dat[sr+52]);
extrVal <- strsplit(x = yields, split = ",");
cleanEV <- lapply(extrVal, function(l) l[[1]])
yieldsC <- as.numeric(unlist(cleanEV));
#--- Get Bonuses
bonus   <- c(dat[sr+6], dat[sr+22], dat[sr+38], dat[sr+54]);
extrVal <- strsplit(x = bonus, split = ",");
cleanEV <- lapply(extrVal, function(l) l[[1]])
bonusC  <- as.numeric(unlist(cleanEV));
#--- Get Spending
spend   <- c(dat[sr+8], dat[sr+24], dat[sr+40], dat[sr+56]);
extrVal <- strsplit(x = spend, split = ",");
cleanEV <- lapply(extrVal, function(l) l[[1]])
spendC  <- as.numeric(unlist(cleanEV));
#--- Get Damages
damag   <- c(dat[sr+10], dat[sr+26], dat[sr+42], dat[sr+58]);
extrVal <- strsplit(x = damag, split = ",");
cleanEV <- lapply(extrVal, function(l) l[[1]])
damagC  <- as.numeric(unlist(cleanEV));
#--- Get Round Score
rscore  <- c(dat[sr+13], dat[sr+29], dat[sr+45], dat[sr+61]);
extrVal <- strsplit(x = rscore, split = ",");
cleanEV <- lapply(extrVal, function(l) l[[1]])
rscoreC <- as.numeric(unlist(cleanEV));
#--- Get Total Score
rscore  <- c(dat[sr+16], dat[sr+32], dat[sr+48], dat[sr+64]);
extrVal <- strsplit(x = rscore, split = ",");
cleanEV <- lapply(extrVal, function(l) l[[1]])
rscoreT <- as.numeric(unlist(cleanEV));
#--- Clean it all up
scores  <- rbind(yieldsC, bonusC, spendC, damagC, rscoreC, rscoreT);
return(scores);
}
setwd("~/Dropbox/projects/crop_games/nash_equilibria")
gb_plot("sample_games")
gb_plot("new_sample_games")
gb_plot("new_sample_games")
gb_plot(dir = "new_sample_games")
gb_plot(dir = "new_sample_games")
